import os
import re
import time
import json
import requests
import psycopg2
from datetime import datetime, timedelta
import threading
import openpyxl
import logging
import aiohttp
from urllib.parse import quote

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-telegram-bot
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# ==============================
# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
# ==============================
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN", "")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID", "")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY", "")
YANDEX_DISK_TOKEN = os.environ.get("YANDEX_DISK_TOKEN", "")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã PostgreSQL
DATABASE_URL = os.environ.get("DATABASE_URL")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

#–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ

DELAY_SECONDS = 60

# ==============================
# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
# ==============================
knowledge_base_path = "knowledge_base.json"
prompt_path = "prompt.txt"
logs_directory = "dialog_logs"

# ==============================
# –ü—Ä–æ—á–∏—Ç–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ –ø—Ä–æ–º–ø—Ç
# ==============================
if not os.path.exists(logs_directory):
    os.makedirs(logs_directory, exist_ok=True)

with open(knowledge_base_path, "r", encoding="utf-8") as f:
    knowledge_base = json.load(f)

with open(prompt_path, "r", encoding="utf-8") as f:
    custom_prompt = f.read().strip()

# ==============================
# –°–µ—Ä–≤–∏—Å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# ==============================
gemini_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}"

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ (–ø–æ user_id)
dialog_history_dict_tg = {}

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (user_id -> (first_name, last_name)) –∏ (user_id -> –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É)
user_names_tg = {}
user_log_files_tg = {}

# –õ–æ–≥-—Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º, –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
log_file_path = os.path.join(
    logs_directory,
    f"dialog_{datetime.utcnow().strftime('%Y-%m-%d_%H-%M-%S')}_unknown_user.txt"
)

# =========================================================================
# 1. –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –ü–û–ö–£–ü–û–ö –ö–õ–ò–ï–ù–¢–û–í, –ï–°–õ–ò –í –ó–ê–ü–†–û–°–ï –ï–°–¢–¨ –ï–ú–ï–ô–õ –ò–õ–ò –¢–ï–õ–ï–§–û–ù
# =========================================================================

def get_client_info(user_question, user_id):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ email –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    –ï—Å–ª–∏ –æ–Ω–∏ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –≤ excel —Ñ–∞–π–ª–µ clients.xlsx.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç, —á—Ç–æ —É –∫–ª–∏–µ–Ω—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∫—É–ø–æ–∫.
    """

    client_info = ""

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ email
    email_regex = r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"
    emails = re.findall(email_regex, user_question)

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
    phone_regex = r"(?:\+7|7|8)?[\s\-]?\(?(\d{3})\)?[\s\-]?(\d{3})[\s\-]?(\d{2})[\s\-]?(\d{2})"
    phones = re.findall(phone_regex, user_question)

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü–µ.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º excel —Ñ–∞–π–ª
    try:
        workbook = openpyxl.load_workbook("clients.xlsx")
        sheet = workbook.active
    except FileNotFoundError:
        logging.error("–§–∞–π–ª clients.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ""

    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ email
    if emails:
        for email in emails:
            email_lower = email.lower().strip()
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –∏—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –µ–º–µ–π–ª—É {email_lower}.")
            email_found = False
            for row in sheet.iter_rows(min_row=2, values_only=True):
                # Email –≤ —Å—Ç–æ–ª–±—Ü–µ E (–∏–Ω–¥–µ–∫—Å 4, –µ—Å–ª–∏ A=0)
                cell_value = str(row[4]).lower().strip() if len(row) > 4 and row[4] else ""
                if email_lower == cell_value:
                    client_data = ", ".join(str(x) for x in row if x is not None)
                    client_info += f"–î–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∏–µ–Ω—Ç—É, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ –µ–º–µ–π–ª—É {email_lower}: {client_data}\n"
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –µ–º–µ–π–ª—É {email_lower}.")
                    email_found = True

            if not email_found:
                client_info += f"–î–∞–Ω–Ω—ã–µ –ø–æ –µ–º–µ–π–ª—É {email_lower} –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –µ–º–µ–π–ª—É {email_lower}.")

    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if phones:
        for phone in phones:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            digits_only = "".join(filter(str.isdigit, "".join(phone)))
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –∏—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã): {digits_only}.")
            phone_found = False
            for row in sheet.iter_rows(min_row=2, values_only=True):
                # –¢–µ–ª–µ—Ñ–æ–Ω –≤ —Å—Ç–æ–ª–±—Ü–µ F (–∏–Ω–¥–µ–∫—Å 5)
                phone_cell = str(row[5]).strip() if len(row) > 5 and row[5] else ""
                # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                phone_digits = "".join(filter(str.isdigit, phone_cell))

                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä
                if phone_digits and phone_digits[-10:] == digits_only[-10:]:
                    client_data = ", ".join(str(x) for x in row if x is not None)
                    client_info += f"–î–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∏–µ–Ω—Ç—É, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {client_data}\n"
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {digits_only}.")
                    phone_found = True

            if not phone_found:
                client_info += f"–î–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.")

    return client_info

# ==============================
# 2. –§–£–ù–ö–¶–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
# ==============================

def send_operator_notification(dialog_id, initial_question, dialog_summary, reason_guess, first_name="", last_name=""):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞.
    """
    message = f"""
üÜò –ó–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name}
–ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {initial_question}
–°–≤–æ–¥–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {dialog_summary}
–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ø—Ä–∏—á–∏–Ω–∞: {reason_guess}
    """.strip()

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": ADMIN_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    requests.post(url, data=data)


# ==============================
# 3. –†–ê–ë–û–¢–ê –° –Ø–ù–î–ï–ö–°.–î–ò–°–ö–û–ú: –ó–ê–ì–†–£–ó–ö–ê –õ–û–ì-–§–ê–ô–õ–û–í
# ==============================
def upload_log_to_yandex_disk(log_file_path):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    create_dir_url = "https://cloud-api.yandex.net/v1/disk/resources"
    headers = {"Authorization": f"OAuth {YANDEX_DISK_TOKEN}"}
    params = {"path": "disk:/app-logs"}
    requests.put(create_dir_url, headers=headers, params=params)

    if not os.path.exists(log_file_path):
        return

    if not YANDEX_DISK_TOKEN:
        print("YANDEX_DISK_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ª–æ–≥–æ–≤.")
        return

    file_name = os.path.basename(log_file_path)
    ya_path = f"disk:/app-logs/{file_name}"

    get_url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    params = {
        "path": ya_path,
        "overwrite": "true"
    }
    headers = {
        "Authorization": f"OAuth {YANDEX_DISK_TOKEN}"
    }
    r = requests.get(get_url, headers=headers, params=params)
    if r.status_code != 200:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:", r.text)
        return

    href = r.json().get("href", "")
    if not href:
        print("–ù–µ –Ω–∞—à–ª–∏ 'href' –≤ –æ—Ç–≤–µ—Ç–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞:", r.text)
        return

    with open(log_file_path, "rb") as f:
        upload_resp = requests.put(href, files={"file": f})
        if upload_resp.status_code == 201:
            print(f"–õ–æ–≥-—Ñ–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
        else:
            print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:", upload_resp.text)


# ==============================
# 4. –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ò–ê–õ–û–ì–û–í –í POSTGRES
# ==============================
def store_dialog_in_db(user_id, user_message, bot_message, client_info=""):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É (user_message + bot_message) –≤ –±–∞–∑—É PostgreSQL.
    –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ.
    """
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cur.execute("""
            CREATE TABLE IF NOT EXISTS dialogues (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                user_message TEXT,
                bot_message TEXT,
                client_info TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)

        # –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏
        cur.execute(
            """INSERT INTO dialogues (user_id, user_message, bot_message, client_info)
                VALUES (%s, %s, %s, %s)""",
            (user_id, user_message, bot_message, client_info)
        )

        conn.commit()
        cur.close()
        conn.close()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –≤ –ë–î: {e}")


def load_dialog_from_db(user_id):
    """
    –ü–æ–¥–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ user_id.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤–∏–¥–∞: [{"user": "...", "bot": "...", "client_info": "..."}, ...].
    """
    dialog_history = []
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        # –ë–µ—Ä—ë–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ user_id, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ id (–∏–ª–∏ –ø–æ created_at)
        cur.execute("""
            SELECT user_message, bot_message, client_info
            FROM dialogues
            WHERE user_id = %s
            ORDER BY id ASC
        """, (user_id,))

        rows = cur.fetchall()
        for row in rows:
            user_m = row[0]
            bot_m = row[1]
            client_info = row[2]
            dialog_history.append({"user": user_m, "bot": bot_m, "client_info": client_info})

        cur.close()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –ë–î –¥–ª—è user_id={user_id}:", e)

    return dialog_history


# ==============================
# 5. –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ==============================
def log_dialog(user_question, bot_response, relevant_titles, relevant_answers, user_id, full_name="", client_info=""):
    """–õ–æ–≥–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª + –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—É (user_message, bot_message) –≤ PostgreSQL.
    –ë–µ–∑ –ø–æ–¥—Å—á—ë—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    store_dialog_in_db(user_id, user_question, bot_response, client_info)

    current_time = datetime.utcnow() + timedelta(hours=6)
    formatted_time = current_time.strftime("%Y-%m-%d_%H-%M-%S")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_log_files_tg:
        local_log_file = user_log_files_tg[user_id]
    else:
        local_log_file = log_file_path

    # –ü–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥-—Ñ–∞–π–ª
    with open(local_log_file, "a", encoding="utf-8") as log_file:
        log_file.write(f"[{formatted_time}] {full_name}: {user_question}\n")
        if relevant_titles and relevant_answers:
            for title, answer in zip(relevant_titles, relevant_answers):
                log_file.write(f"[{formatted_time}] –ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {title} -> {answer}\n")
        if client_info:
            log_file.write(f"[{formatted_time}] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–ª–∏–µ–Ω—Ç—É: {client_info}\n")
        log_file.write(f"[{formatted_time}] –ú–æ–¥–µ–ª—å: {bot_response}\n\n")

    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞:\n{open(local_log_file, 'r', encoding='utf-8').read()}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    upload_log_to_yandex_disk(local_log_file)


# ==============================
# 6. –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GEMINI
# ==============================
def find_relevant_titles_with_gemini(user_question):
    titles = list(knowledge_base.keys())
    prompt_text = f"""
–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤-–∫–ª—é—á–µ–π:
{', '.join(titles)}

–ù–∞–π–¥–∏ —Ç—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –∫ –∑–∞–ø—Ä–æ—Å—É: "{user_question}".
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º–∏ –≤–æ–ø—Ä–æ—Å—ã, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """.strip()

    data = {
        "contents": [{"parts": [{"text": prompt_text}]}]
    }
    headers = {"Content-Type": "application/json"}

    for attempt in range(5):
        resp = requests.post(gemini_url, headers=headers, json=data)
        if resp.status_code == 200:
            try:
                result = resp.json()
                text_raw = result['candidates'][0]['content']['parts'][0]['text']
                lines = text_raw.strip().split("\n")
                return [ln.strip() for ln in lines if ln.strip()]
            except KeyError:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏."
        elif resp.status_code == 500:
            time.sleep(10)
        else:
            return f"–û—à–∏–±–∫–∞: {resp.status_code}. {resp.text}"
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def generate_response(user_question, client_data, dialog_history, custom_prompt, relevant_answers=None):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
    history_text = "\n".join([
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {turn.get('user','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n–ú–æ–¥–µ–ª—å: {turn.get('bot','–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}"
        for turn in dialog_history
    ])

    knowledge_hint = (
        f"–ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {relevant_answers}"
        if relevant_answers else ""
    )

    full_prompt = (
        f"{custom_prompt}\n\n"
f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:\n{history_text}\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_question}\n"
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ: {client_data}\n"
        f"–ú–æ–¥–µ–ª—å:"
    )

    data = {
        "contents": [{"parts": [{"text": full_prompt}]}]
    }
    headers = {"Content-Type": "application/json"}

    for attempt in range(5):
        resp = requests.post(gemini_url, headers=headers, json=data)
        if resp.status_code == 200:
            try:
                result = resp.json()
                return result['candidates'][0]['content']['parts'][0]['text']
            except KeyError:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏."
        elif resp.status_code == 500:
            time.sleep(10)
        else:
            return f"–û—à–∏–±–∫–∞: {resp.status_code}. {resp.text}"
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def generate_summary_and_reason(dialog_history):
    history_text = " | ".join([
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {turn.get('user', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} -> –ú–æ–¥–µ–ª—å: {turn.get('bot', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}"
        for turn in dialog_history[-10:]
    ])
    prompt_text = f"""
–°–≤–æ–¥–∫–∞ –¥–∏–∞–ª–æ–≥–∞: {history_text}

–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞:
1. –°—Ñ–æ—Ä–º–∏—Ä—É–π —Å–≤–æ–¥–∫—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è.
2. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏ –ø—Ä–∏—á–∏–Ω—É, –ø–æ—á–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
    """.strip()
    data = {
        "contents": [{"parts": [{"text": prompt_text}]}]
    }
    headers = {"Content-Type": "application/json"}

    for attempt in range(5):
        resp = requests.post(gemini_url, headers=headers, json=data)
        if resp.status_code == 200:
            try:
                result = resp.json()
                output = result['candidates'][0]['content']['parts'][0]['text'].split("\n", 1)
                dialog_summary = output[0].strip() if len(output) > 0 else "–°–≤–æ–¥–∫–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞"
                reason_guess = output[1].strip() if len(output) > 1 else "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
                return dialog_summary, reason_guess
            except (KeyError, IndexError):
                return "–°–≤–æ–¥–∫–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        elif resp.status_code == 500:
            time.sleep(10)
        else:
            return "–û—à–∏–±–∫–∞ API", "–û—à–∏–±–∫–∞ API"
    return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º"


# ==============================
# 7. –¢–ê–ô–ú–ï–†, –ë–£–§–ï–† –°–û–û–ë–©–ï–ù–ò–ô –∏ –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
# ==============================
user_buffers_tg = {}  # –ë—É—Ñ–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_timers_tg = {} # –¢–∞–π–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_questions_tg = {} # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ª–æ–≥–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")

# ==============================
# 8. –ü–ê–£–ó–ê –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# ==============================

def is_user_paused(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –ø–∞—É–∑–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞–ø—Ä–æ—Å –≤ –±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if isinstance(user_id, int):
            platform = "tg"
            identifier = str(user_id)
        elif isinstance(user_id, str):
            platform = "vk"
            identifier = user_id
        else:
            logging.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {type(user_id)}")
            return False

        url = f"http://telegram-bot.railway.internal.com/is_paused/{platform}/{quote(identifier)}" # –ò–∑–º–µ–Ω–µ–Ω–æ
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            data = response.json()
            return data.get("paused", False)
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—É–∑—ã –¥–ª—è {identifier} –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ {platform}: {response.status}")
            return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False

# ===================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º–∞
# ===================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    user_id = update.message.from_user.id
    first_name = update.message.from_user.first_name
    last_name = update.message.from_user.last_name
    full_name = f"{first_name} {last_name}".strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_names_tg[user_id] = (first_name, last_name if last_name else "")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π log_file_path c –∏–º–µ–Ω–µ–º/—Ñ–∞–º–∏–ª–∏–µ–π
    now_str = datetime.utcnow().strftime('%Y-%m-%d_%H-%M-%S')
    custom_file_name = f"dialog_{now_str}_{full_name}.txt"
    custom_log_path = os.path.join(logs_directory, custom_file_name)
    user_log_files_tg[user_id] = custom_log_path

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    dialog_history_dict_tg[user_id] = load_dialog_from_db(user_id)

    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name}! –Ø –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.")

async def handle_telegram_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.message.from_user.id
    text = update.message.text

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
    if user_id not in user_buffers_tg:
        user_buffers_tg[user_id] = []
    user_buffers_tg[user_id].append(text)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    if user_id in user_timers_tg:
        user_timers_tg[user_id].cancel()
    timer = threading.Timer(DELAY_SECONDS, generate_and_send_response_tg, args=(update, context))
    user_timers_tg[user_id] = timer
    timer.start()

async def generate_and_send_response_tg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ."""
    user_id = update.message.from_user.id

     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –ø–∞—É–∑–µ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞
    first_name, last_name = user_names_tg.get(user_id, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", ""))
    full_name = f"{first_name} {last_name}".strip()
    if is_user_paused(user_id): # –£–±—Ä–∞–Ω–æ await
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–∞—É–∑–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    if user_id in user_timers_tg:
        user_timers_tg[user_id].cancel()
        del user_timers_tg[user_id]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±—É—Ñ–µ—Ä–∞
    combined_text = "\n".join(user_buffers_tg.get(user_id, []))
    if not combined_text:
        return
    user_buffers_tg[user_id] = [] # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    dialog_history = dialog_history_dict_tg.get(user_id, [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    emails = re.findall(r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", combined_text)
    phones = re.findall(r"(?:\+7|7|8)?[\s\-]?\(?(\d{3})\)?[\s\-]?(\d{3})[\s\-]?(\d{2})[\s\-]?(\d{2})", combined_text)

    client_data = ""
    if emails or phones:
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        client_data = get_client_info(combined_text, user_id)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.")
        if client_data:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ: {client_data}")
        else:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    relevant_titles = find_relevant_titles_with_gemini(combined_text)
    relevant_answers = [knowledge_base[t] for t in relevant_titles if t in knowledge_base]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
    model_response = generate_response(combined_text, client_data, dialog_history, custom_prompt, relevant_answers)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    dialog_history.append({"user": combined_text, "bot": model_response, "client_info": client_data})
    dialog_history_dict_tg[user_id] = dialog_history

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
    log_dialog(combined_text, model_response, relevant_titles, relevant_answers, user_id, full_name, client_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if "–æ–ø–µ—Ä–∞—Ç–æ—Ä" in combined_text.lower():
        summary, reason = generate_summary_and_reason(dialog_history)
        send_operator_notification(user_id, combined_text, summary, reason, first_name, last_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await context.bot.send_message(chat_id=update.effective_chat.id, text=model_response)

# ==============================
# 9. –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ==============================

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    try:
        application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

        start_handler = CommandHandler('start', start)
        message_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), handle_telegram_message)

        application.add_handler(start_handler)
        application.add_handler(message_handler)

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

        application.run_polling()

    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()